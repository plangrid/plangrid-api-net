// <copyright file="PlanGridApiExtensions.cs" company="PlanGrid, Inc.">
//     Copyright (c) 2016 PlanGrid, Inc. All rights reserved.
// </copyright>

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Refit;

namespace PlanGrid.Api
{
    public static class PlanGridApiExtensions
    {
        public static async Task<T> Resolve<T>(this IPlanGridApi api, RecordReference<T> reference)
        {
            var generatedApi = (AutoGeneratedIPlanGridApi)api;
            RefitSettings settings = generatedApi.Settings;
            HttpClient client = generatedApi.Client;

            HttpResponseMessage response = await client.GetAsync(reference.Url);
            response.EnsureSuccessStatusCode();
            string content = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<T>(content, settings.JsonSerializerSettings);
            return result;
        }

        public static async Task<Page<T>> Resolve<T>(this IPlanGridApi api, CollectionReference<T> reference)
        {
            var generatedApi = (AutoGeneratedIPlanGridApi)api;
            RefitSettings settings = generatedApi.Settings;
            HttpClient client = generatedApi.Client;

            HttpResponseMessage response = await client.GetAsync(reference.Url);
            response.EnsureSuccessStatusCode();
            string content = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<Page<T>>(content, settings.JsonSerializerSettings);
            return result;
        }

        public static Task<Attachment> UploadPdfAttachment(this IPlanGridApi api, string projectUid, string name, Stream payload, string folder = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            return api.UploadAttachment(projectUid, AttachmentUpload.Pdf, name, payload, folder, cancellationToken);
        }

        public static async Task<Attachment> UploadAttachment(this IPlanGridApi api, string projectUid, string contentType, string name, Stream payload, string folder = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            FileUpload request = await api.CreateAttachmentUploadRequest(projectUid, new AttachmentUpload { ContentType = contentType, Name = name, Folder = folder });
            return await api.Upload<Attachment>(request, payload, cancellationToken);
        }

        public static Task<Photo> UploadPngPhoto(this IPlanGridApi api, string projectUid, string title, Stream payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            return api.UploadPhoto(projectUid, PhotoUpload.Png, title, payload, cancellationToken);
        }

        public static Task<Photo> UploadJpegPhoto(this IPlanGridApi api, string projectUid, string title, Stream payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            return api.UploadPhoto(projectUid, PhotoUpload.Jpeg, title, payload, cancellationToken);
        }

        public static async Task<Photo> UploadPhoto(this IPlanGridApi api, string projectUid, string contentType, string title, Stream payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            FileUpload request = await api.CreatePhotoUploadRequest(projectUid, new PhotoUpload { ContentType = contentType, Title = title });
            return await api.Upload<Photo>(request, payload, cancellationToken);
        }

        public static async Task<T> Upload<T>(this IPlanGridApi api, FileUpload fileUpload, Stream payload, CancellationToken cancellationToken = default(CancellationToken))
        {
            var values = new List<IMultipartContent>();
            foreach (AwsPostFormArgument item in fileUpload.AwsPostFormArguments.Fields)
            {
                values.Add(new StringMultipartContent(item.Name, item.Value));
            }

            var generatedApi = (AutoGeneratedIPlanGridApi)api;
            RefitSettings settings = generatedApi.Settings;

            values.Add(new StreamMultipartContent("file", "data", fileUpload.AwsPostFormArguments.Fields.Single(x => x.Name == "Content-Type").Value, payload));
            HttpResponseMessage response = await MultipartUploader.Upload(fileUpload.AwsPostFormArguments.Action, cancellationToken, values.ToArray());
            string responseText = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<T>(responseText, settings.JsonSerializerSettings);
        }
    }
}
